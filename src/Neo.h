#ifndef NEO_H
#define NEO_H

#include <avr/pgmspace.h>

#if (ARDUINO >= 100)
#include <Arduino.h>
#else
#include <WProgram.h>
#endif

#include <SPI.h>

#define MAX7219_REG_NOOP        0x00
// codes 1 to 8 are digit positions 1 to 8
#define MAX7219_REG_DECODEMODE  0x09
#define MAX7219_REG_INTENSITY   0x0A
#define MAX7219_REG_SCANLIMIT   0x0B
#define MAX7219_REG_SHUTDOWN    0x0C
#define MAX7219_REG_DISPLAYTEST 0x0F

const static byte disp1[38][8] = {
  {0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C},//0
  {0x10,0x18,0x14,0x10,0x10,0x10,0x10,0x10},//1
  {0x7E,0x2,0x2,0x7E,0x40,0x40,0x40,0x7E},//2
  {0x3E,0x2,0x2,0x3E,0x2,0x2,0x3E,0x0},//3
  {0x8,0x18,0x28,0x48,0xFE,0x8,0x8,0x8},//4
  {0x3C,0x20,0x20,0x3C,0x4,0x4,0x3C,0x0},//5
  {0x3C,0x20,0x20,0x3C,0x24,0x24,0x3C,0x0},//6
  {0x3E,0x22,0x4,0x8,0x8,0x8,0x8,0x8},//7
  {0x0,0x3E,0x22,0x22,0x3E,0x22,0x22,0x3E},//8
  {0x3E,0x22,0x22,0x3E,0x2,0x2,0x2,0x3E},//9
  {0x8,0x14,0x22,0x3E,0x22,0x22,0x22,0x22},//A
  {0x3C,0x22,0x22,0x3E,0x22,0x22,0x3C,0x0},//B
  {0x3C,0x40,0x40,0x40,0x40,0x40,0x3C,0x0},//C
  {0x7C,0x42,0x42,0x42,0x42,0x42,0x7C,0x0},//D
  {0x7C,0x40,0x40,0x7C,0x40,0x40,0x40,0x7C},//E 
  {0x7C,0x40,0x40,0x7C,0x40,0x40,0x40,0x40},//F
  {0x3C,0x40,0x40,0x40,0x40,0x44,0x44,0x3C},//G
  {0x44,0x44,0x44,0x7C,0x44,0x44,0x44,0x44},//H
  {0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x7C},//I
  {0x3C,0x8,0x8,0x8,0x8,0x8,0x48,0x30},//J
  {0x0,0x24,0x28,0x30,0x20,0x30,0x28,0x24},//K
  {0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7C},//L
  {0x81,0xC3,0xA5,0x99,0x81,0x81,0x81,0x81},//M
  {0x0,0x42,0x62,0x52,0x4A,0x46,0x42,0x0},//N
  {0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C},//O
  {0x3C,0x22,0x22,0x22,0x3C,0x20,0x20,0x20},//P
  {0x1C,0x22,0x22,0x22,0x22,0x26,0x22,0x1D},//Q
  {0x3C,0x22,0x22,0x22,0x3C,0x24,0x22,0x21},//R
  {0x0,0x1E,0x20,0x20,0x3E,0x2,0x2,0x3C},//S
  {0x0,0x3E,0x8,0x8,0x8,0x8,0x8,0x8},//T
  {0x42,0x42,0x42,0x42,0x42,0x42,0x22,0x1C},//U
  {0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18},//V
  {0x0,0x49,0x49,0x49,0x49,0x2A,0x1C,0x0},//W
  {0x0,0x41,0x22,0x14,0x8,0x14,0x22,0x41},//X
  {0x41,0x22,0x14,0x8,0x8,0x8,0x8,0x8},//Y
  {0x0,0x7F,0x2,0x4,0x8,0x10,0x20,0x7F}//Z
}; 

const static byte invaderA[2][8] = {
  {
    B00011000,
    B00111100,
    B01111110,
    B11011011,
    B11111111,
    B00100100,
    B01011010,
    B10100101
  },
  {
    B00011000,
    B00111100,
    B01111110,
    B11011011,
    B11111111,
    B00100100,
    B01011010,
    B01000010
  }
};

const static byte invaderB[2][8] = {
  {
    B00100100,
    B00100100,
    B01111110,
    B11011011,
    B11111111,
    B11111111,
    B10100101,
    B00100100
  },
  {
    B00100100,
    B10100101,
    B11111111,
    B11011011,
    B11111111,
    B01111110,
    B00100100,
    B01000010
  }
};

class Neo {
  public:
    Neo(uint8_t din, uint8_t cs, uint8_t clk, uint8_t displayCount);
        
    void init();
    void setBrightness(uint8_t value);
    void displayTest();
    void printChar(uint8_t disp, uint8_t ch);
    void renderDisplay(uint8_t disp, byte frame[8]);
    void clearDisplay();
    void fillDisplay();
    
    void demo();
    void demoInvader();
    void test();

  private:
    void transfer(uint8_t address, uint8_t value);
    void transferToAll(uint8_t address, uint8_t value);
    void transferToDisp(uint8_t disp, uint8_t address, uint8_t value);
  
    uint8_t _display_count;
    uint8_t _din;
    uint8_t _cs;
    uint8_t _clk;
};

#endif